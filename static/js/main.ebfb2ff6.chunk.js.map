{"version":3,"sources":["utils/store.tsx","components/Start.tsx","utils/wordsUtils.ts","components/Memorize.tsx","components/Guess.tsx","components/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultState","stage","words","reducer","state","action","console","log","type","Error","StateContext","React","createContext","undefined","DispatchStateContext","StoreProvider","children","useReducer","dispatch","Provider","value","useStateContext","context","useContext","useDispatchStateContext","Start","useState","nbWords","setNbWords","className","onChange","event","currentTarget","valueAsNumber","onClick","nb","length","index","Math","round","random","wordList","word","indexOf","push","getWords","map","good","guess","Memorise","list","key","Guess","setWords","firstInputRef","useRef","useEffect","current","focus","newWord","slice","ref","Result","score","filter","App","stages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebfb2ff6.chunk.js","sourcesContent":["import React, { useReducer } from 'react'\n\n//#region type\n\ntype StoreProviderProps = { children: React.ReactNode }\n\ntype Word = {\n    good: string,\n    guess: string,\n}\n\ntype State = {\n    stage: number;\n    words: Array<Word>;\n}\n\ntype Action =\n    {\n        type: 'nextStage' | 'reset',\n    } |\n    {\n        type: 'setWords',\n        words: Array<Word>\n    }\n\ntype Dispatch = (action: Action) => void\n\n//#endregion\n\nconst defaultState: State = {\n    stage: 0,\n    words: []\n};\n\n\nconst reducer = (state: State, action: Action): State => {\n    console.log(`action ${action.type}`)\n    switch (action.type) {\n        case 'nextStage':\n            return { ...state, stage: state.stage++ };\n        case 'reset':\n            return defaultState;\n        case 'setWords':\n            return { ...state, words: action.words };\n        default:\n            throw new Error();\n    }\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchStateContext = React.createContext<Dispatch | undefined>(undefined);\n\nfunction StoreProvider({ children }: StoreProviderProps) {\n\n\n    const [state, dispatch] = useReducer(reducer, defaultState);\n\n    return (\n        <StateContext.Provider value={state}>\n            <DispatchStateContext.Provider value={dispatch}>\n                {children}\n            </DispatchStateContext.Provider>\n        </StateContext.Provider>\n    )\n}\n\nfunction useStateContext() {\n    const context = React.useContext(StateContext);\n    if (context === undefined) {\n        throw new Error(\"useStateContext must be used within a StateProvider\")\n    }\n    return context;\n}\n\nfunction useDispatchStateContext() {\n    const context = React.useContext(DispatchStateContext);\n    if (context === undefined) {\n        throw new Error(\"useDispatchStateContext must be used within a StateDispatchProvider\")\n    }\n    return context;\n}\n\nexport { StoreProvider, useStateContext, useDispatchStateContext }\n","import React, { useState } from \"react\";\nimport { useDispatchStateContext } from \"../utils/store\";\nimport { getWords } from \"../utils/wordsUtils\";\nfunction Start() {\n  const dispatch = useDispatchStateContext();\n  const [nbWords, setNbWords] = useState(10);\n\n  const onClick = () => {\n    const wordsStr = getWords(nbWords);\n    const words = wordsStr.map((word) => {\n      return {\n        good: word,\n        guess: \"\",\n      };\n    });\n    dispatch({ type: \"setWords\", words: words });\n    dispatch({ type: \"nextStage\" });\n  };\n\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setNbWords(event.currentTarget.valueAsNumber);\n  };\n  return (\n    <div className=\"\">\n      <div>\n        <input\n          type=\"number\"\n          onChange={onChange}\n          value={nbWords}\n          className=\"input\"\n        ></input>\n      </div>\n      <div className=\"\">\n        <button onClick={onClick} className=\"btn w-full my-5\">\n          Start\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Start;\n","import wordList from \"../assets/word_list.json\";\n\nfunction getWords(nb: number): Array<string> {\n  let words: Array<string> = [];\n  while (words.length < nb) {\n    let index = Math.round(Math.random() * wordList.length);\n    let word = wordList[index];\n    if (words.indexOf(word) === -1) {\n      words.push(word);\n    }\n  }\n  return words;\n}\n\nexport { getWords };\n","import React from \"react\";\nimport { useStateContext, useDispatchStateContext } from \"../utils/store\";\n\nfunction Memorise() {\n  const state = useStateContext();\n  const dispatch = useDispatchStateContext();\n  const list = state.words.map((word, index) => (\n    <li\n      className=\"bg-gray-200 my-2 rounded py-1 px-4 w-full text-gray-700\"\n      key={index}\n    >\n      {word.good}\n    </li>\n  ));\n  return (\n    <>\n      <div>\n        <ul>{list}</ul>\n      </div>\n      <button\n        className=\"btn w-full\"\n        onClick={() => dispatch({ type: \"nextStage\" })}\n      >\n        Next\n      </button>\n    </>\n  );\n}\n\nexport default Memorise;\n","import React, { useRef, useEffect } from \"react\";\nimport { useStateContext, useDispatchStateContext } from \"../utils/store\";\n\nfunction Guess() {\n  const state = useStateContext();\n  const [words, setWords] = React.useState(state.words);\n\n  const dispatch = useDispatchStateContext();\n\n  const firstInputRef: React.RefObject<HTMLInputElement> = useRef(null);\n\n  const onChange = (\n    index: number,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    let newWord = words.slice();\n    newWord[index].guess = event.currentTarget.value;\n    setWords(newWord);\n  };\n\n  const onClick = () => {\n    dispatch({ type: \"setWords\", words: words });\n    dispatch({ type: \"nextStage\" });\n  };\n\n  useEffect(() => {\n    firstInputRef.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <div>\n        {words.map((word, index) => (\n          <div key={index}>\n            <input\n              className=\"input my-2\"\n              type=\"text\"\n              onChange={(event) => onChange(index, event)}\n              value={word.guess}\n              ref={index === 0 ? firstInputRef : null}\n            />\n          </div>\n        ))}\n      </div>\n      <button className=\"btn w-full\" onClick={onClick}>\n        Next\n      </button>\n    </>\n  );\n}\n\nexport default Guess;\n","import React from \"react\";\nimport { useStateContext, useDispatchStateContext } from \"../utils/store\";\n\nfunction Result() {\n  const state = useStateContext();\n  const score = state.words.filter((word) => word.good === word.guess).length;\n  const dispatch = useDispatchStateContext();\n\n  return (\n    <>\n      <table>\n        <tbody>\n      {\n          state.words.map((word, index) => (\n            <tr key={index}>\n              <td>\n                <div className=\"w-1/2 bg-gray-200 my-4 rounded py-1 px-4 w-full text-gray-700 mr-4\">\n                  {word.good}\n                </div>\n              </td>\n              <td>\n                <div\n                  className={`w-1/2 my-4 rounded py-1 px-4 w-full text-gray-700 ${word.good === word.guess ? \"bg-green-400\" : \"bg-red-400\"}`}>\n                  {word.guess}\n                </div>\n              </td>\n            </tr>\n          ))\n      }\n        </tbody>\n      </table>\n\n      <div>\n        Score: {score} / {state.words.length}\n      </div>\n      <button\n        onClick={() => dispatch({ type: \"reset\" })}\n        className=\"btn w-full my-5\"\n      >\n        Restart\n      </button>\n    </>\n  );\n}\n\nexport default Result;\n","import React from \"react\";\nimport Start from \"./components/Start\";\nimport Memorise from \"./components/Memorize\";\nimport { useStateContext } from \"./utils/store\";\nimport Guess from \"./components/Guess\";\nimport Result from \"./components/Result\";\n\nfunction App() {\n  let stages = [<Start />, <Memorise />, <Guess />, <Result />];\n\n  const state = useStateContext();\n  return (\n    <div className=\"flex flex-row justify-center mt-4\">\n      <div>{stages[state.stage]}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StoreProvider } from \"./utils/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}